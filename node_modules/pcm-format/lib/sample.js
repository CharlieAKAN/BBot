'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.normalize = normalize;
exports.output = output;
exports.convert = convert;

var _format = require('./format');

// sample is buffer, format is obj, return -1..1 float sample

function normalize(sample, format) {
    var _defaults = (0, _format.defaults)(format);

    var float = _defaults.float;
    var signed = _defaults.signed;
    var bitDepth = _defaults.bitDepth;
    var byteOrder = _defaults.byteOrder;

    if (float) {
        // signed = true, bit depth = 32
        return sample['readFloat' + byteOrder](0);
    }

    var intSample = undefined;
    if (signed) {
        intSample = sample['readInt' + bitDepth + byteOrder](0);
    } else {
        intSample = sample['readUInt' + bitDepth + byteOrder](0) - Math.pow(2, bitDepth - 1);
    }

    return intSample / Math.pow(2, bitDepth - 1);
}

// sample is -1..1 float sample, format is obj, return buffer

function output(normSample, format, buffer) {
    var _defaults2 = (0, _format.defaults)(format);

    var float = _defaults2.float;
    var signed = _defaults2.signed;
    var bitDepth = _defaults2.bitDepth;
    var byteOrder = _defaults2.byteOrder;

    buffer = buffer != null ? buffer : new Buffer(bitDepth / 8);

    if (float) {
        // signed = true, bit depth = 32
        buffer['writeFloat' + byteOrder](normSample, 0);
    } else if (signed) {
        var val = Math.floor(normSample * (Math.pow(2, bitDepth - 1) - 1));

        buffer['writeInt' + bitDepth + byteOrder](val, 0);
    } else {
        var val = Math.floor((normSample + 1.0) * Math.pow(2, bitDepth - 1));

        buffer['writeUInt' + bitDepth + byteOrder](val, 0);
    }

    return buffer;
}

function convert(sample, inFormat, outFormat, out) {
    return output(normalize(sample, inFormat), outFormat, out);
}