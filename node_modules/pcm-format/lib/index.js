'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _stream = require('stream');

var _stream2 = _interopRequireDefault(_stream);

var _sample = require('./sample');

var sample = _interopRequireWildcard(_sample);

var _format = require('./format');

var PcmFormatTransform = (function (_stream$Transform) {
    _inherits(PcmFormatTransform, _stream$Transform);

    function PcmFormatTransform(inFormat, outFormat) {
        _classCallCheck(this, PcmFormatTransform);

        _get(Object.getPrototypeOf(PcmFormatTransform.prototype), 'constructor', this).call(this);

        this.inFormat = (0, _format.defaults)(inFormat);
        this.outFormat = (0, _format.defaults)(outFormat);

        this.rest = null;
    }

    _createClass(PcmFormatTransform, [{
        key: '_transform',
        value: function _transform(chunk, enc, done) {
            if (this.rest != null) chunk = Buffer.concat([this.rest, chunk]);

            var inSampleSize = this.inFormat.bitDepth / 8;
            var outSampleSize = this.outFormat.bitDepth / 8;

            var sampleCount = Math.floor(chunk.length / inSampleSize);
            this.rest = chunk.slice(sampleCount * inSampleSize);
            chunk = chunk.slice(0, sampleCount * inSampleSize);

            var outBuf = new Buffer(sampleCount * outSampleSize);
            for (var i = 0; i < sampleCount; i++) {
                sample.convert(chunk.slice(i * inSampleSize), this.inFormat, this.outFormat, outBuf.slice(i * outSampleSize));
            }

            this.push(outBuf);
            done();
        }
    }]);

    return PcmFormatTransform;
})(_stream2['default'].Transform);

exports['default'] = PcmFormatTransform;

PcmFormatTransform.sample = sample;
module.exports = exports['default'];